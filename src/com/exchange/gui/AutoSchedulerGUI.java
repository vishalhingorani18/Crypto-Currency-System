/*
auto * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.exchange.gui;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import com.exchange.AutoScheduler;
import com.exchange.CryptoCurrency;
import com.exchange.CurrencySystem;
import com.exchange.Payment;
import com.exchange.User;

/**
 *
 * @author samsung
 */
public class AutoSchedulerGUI extends javax.swing.JFrame {

    /**
     * Creates new form AutoSchedulerGUI
     */
	
	CurrencySystem currencySystem;
	CryptoCurrency [] cryptoCurrencies;
	User user;
	String bankName;
	
	
    public AutoSchedulerGUI() {
       
    }
    
    public AutoSchedulerGUI(User user, CurrencySystem currencySystem, CryptoCurrency [] cryptoCurrencies)
    {
    	
      	this.user = user;
    	this.currencySystem = currencySystem;
    	this.cryptoCurrencies = cryptoCurrencies;
    	initComponents();
    	   txtROI.setEnabled(false);
           txtIncreaseAmount.setEnabled(false);
           txtDays.setEnabled(true);
           rbDaily.setEnabled(true);
           rbWeekly.setEnabled(true);
           rbCustom.setEnabled(true);
           lbl1.setEnabled(true);
           lbl2.setEnabled(false);
           lbl3.setEnabled(false);
           jLabel17.setEnabled(true);
    	
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rbAccount = new javax.swing.JRadioButton();
        rbCard = new javax.swing.JRadioButton();
        cbNames = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        rbAuto = new javax.swing.JRadioButton();
        rbManual = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        rbPercentage = new javax.swing.JRadioButton();
        rbGrowth = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtBitcoin = new javax.swing.JTextField();
        txtEthereum = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtLitecoin = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtGrowthLitecoin = new javax.swing.JLabel();
        txtGrowthBitcoin = new javax.swing.JTextField();
        txtGrowthEthereum = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        lbl1 = new javax.swing.JCheckBox();
        txtROI = new javax.swing.JTextField();
        lbl3 = new javax.swing.JLabel();
        txtIncreaseAmount = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        rbDaily = new javax.swing.JRadioButton();
        rbWeekly = new javax.swing.JRadioButton();
        rbCustom = new javax.swing.JRadioButton();
        txtDays = new javax.swing.JTextField();
        btnSchedule = new javax.swing.JButton();
        lbl2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Auto Scheduler");

        jLabel2.setText("Payment Method");

        rbAccount.setText("Bank Account");
        rbAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					rbAccountActionPerformed(evt);
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        rbCard.setText("Credit Card");
        rbCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					rbCardActionPerformed(evt);
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        cbNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Bank "}));
        cbNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNamesActionPerformed(evt);
            }
        });

        jLabel3.setText("Amount");

        txtAmount.setColumns(10);
        txtAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmountActionPerformed(evt);
            }
        });

        jLabel4.setText("Investment Type");

        rbAuto.setLabel("Auto");
        rbAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAutoActionPerformed(evt);
            }
        });

        rbManual.setLabel("Manual");
        rbManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbManualActionPerformed(evt);
            }
        });

        jLabel5.setText("Divide Investment");

        rbPercentage.setText("By%");
        rbPercentage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPercentageActionPerformed(evt);
            }
        });

        rbGrowth.setLabel("By % and Growth Rate");
        rbGrowth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbGrowthActionPerformed(evt);
            }
        });

        jLabel6.setText("Bitcoin");

        jLabel7.setText("Ethereum");

        txtBitcoin.setColumns(10);
        txtBitcoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBitcoinActionPerformed(evt);
            }
        });

        txtEthereum.setColumns(10);
        txtEthereum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEthereumActionPerformed(evt);
            }
        });

        jLabel8.setText("Litecoin");

        txtLitecoin.setColumns(10);
        txtLitecoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLitecoinActionPerformed(evt);
            }
        });

        jLabel9.setText("%");

        jLabel10.setText("%");

        jLabel11.setText("%");

        jLabel12.setText("% growth");

        jLabel13.setText("% growth");

        txtGrowthLitecoin.setText("% growth");

        txtGrowthBitcoin.setColumns(10);
        txtGrowthBitcoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGrowthBitcoinActionPerformed(evt);
            }
        });

        txtGrowthEthereum.setColumns(10);
        txtGrowthEthereum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGrowthEthereumActionPerformed(evt);
            }
        });

        jTextField7.setColumns(10);
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        lbl1.setText("Use ROI to increase investment periodically");
        lbl1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lbl1ActionPerformed(evt);
            }
        });

        txtROI.setColumns(10);

        lbl3.setText("% increase investment by");

        txtIncreaseAmount.setColumns(10);
        txtIncreaseAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIncreaseAmountActionPerformed(evt);
            }
        });

        jLabel16.setText("%");

        jLabel17.setText("Repeat Transaction");

        rbDaily.setText("Daily(secs)");
        rbDaily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDailyActionPerformed(evt);
            }
        });

        rbWeekly.setText("Weekly(secs)");
        rbWeekly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbWeeklyActionPerformed(evt);
            }
        });

        rbCustom.setText("Custom");
        rbCustom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCustomActionPerformed(evt);
            }
        });

        txtDays.setColumns(10);
        txtDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDaysActionPerformed(evt);
            }
        });

        btnSchedule.setText("Schedule");
        btnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnScheduleActionPerformed(evt);
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        lbl2.setText("If ROI >");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbAccount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbManual)
                                    .addComponent(rbGrowth)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rbCard)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbPercentage)
                            .addComponent(rbAuto)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtLitecoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11)))
                        .addGap(56, 56, 56)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtGrowthLitecoin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtGrowthEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtGrowthBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtROI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIncreaseAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(rbDaily)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSchedule)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbWeekly)
                                .addGap(18, 18, 18)
                                .addComponent(rbCustom)
                                .addGap(18, 18, 18)
                                .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(rbAccount)
                    .addComponent(rbCard)
                    .addComponent(cbNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(rbAuto)
                    .addComponent(rbManual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(rbPercentage)
                    .addComponent(rbGrowth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel12)
                    .addComponent(txtGrowthBitcoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel13)
                    .addComponent(txtGrowthEthereum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtLitecoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtGrowthLitecoin)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl1)
                    .addComponent(txtROI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl3)
                    .addComponent(txtIncreaseAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(lbl2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(rbDaily)
                    .addComponent(rbWeekly)
                    .addComponent(rbCustom)
                    .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSchedule))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbWeeklyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbWeeklyActionPerformed
         if(rbWeekly.isSelected()){
                rbDaily.setEnabled(false);
                rbWeekly.setEnabled(true);
                rbCustom.setEnabled(false);
                 txtDays.setEnabled(false);
    }
    else if(!rbWeekly.isSelected()){
        rbDaily.setEnabled(true);
                rbWeekly.setEnabled(true);
                rbCustom.setEnabled(true);
                 txtDays.setEnabled(true);
    }
    }//GEN-LAST:event_rbWeeklyActionPerformed

    private void rbCustomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCustomActionPerformed
        if(rbWeekly.isSelected()){
                rbDaily.setEnabled(false);
                rbWeekly.setEnabled(false);
                rbCustom.setEnabled(true);
                 txtDays.setEnabled(false);
    }
    else if(!rbWeekly.isSelected()){
        rbDaily.setEnabled(true);
                rbWeekly.setEnabled(true);
                rbCustom.setEnabled(true);
                 txtDays.setEnabled(true);
    }
    }//GEN-LAST:event_rbCustomActionPerformed

    private void rbAccountActionPerformed(java.awt.event.ActionEvent evt) throws ClassNotFoundException, IOException {//GEN-FIRST:event_rbAccountActionPerformed
        if(rbAccount.isSelected()){
        	cbNames.removeAllItems();
    		addCombo();
                rbAccount.setEnabled(true);
                rbCard.setEnabled(false);;
    }
    else if(!rbAccount.isSelected()){
    	cbNames.removeAllItems();
    	cbNames.addItem("Select Bank");
                rbAccount.setEnabled(true);
                rbCard.setEnabled(true);
    }
    }//GEN-LAST:event_rbAccountActionPerformed

    private void rbCardActionPerformed(java.awt.event.ActionEvent evt) throws ClassNotFoundException, IOException {//GEN-FIRST:event_rbCardActionPerformed
        if(rbCard.isSelected()){
        	cbNames.removeAllItems();
        	addCombo();
                rbAccount.setEnabled(false);
                rbCard.setEnabled(true);;
    }
    else if(!rbCard.isSelected()){
    	cbNames.removeAllItems();
    	cbNames.addItem("Select Bank");
                rbAccount.setEnabled(true);
                rbCard.setEnabled(true);
    }
    }//GEN-LAST:event_rbCardActionPerformed

    private void cbNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNamesActionPerformed
        // TODO add your handling code here:
     	if(cbNames.getSelectedItem()!=null)
   	     bankName=cbNames.getSelectedItem().toString();
    }//GEN-LAST:event_cbNamesActionPerformed
    
    public void addCombo() throws ClassNotFoundException, IOException
    {
    	    Payment pay=user.getBank();
 		HashMap<String, Double> map=pay.getBankAccount();
 		
 		
 		
 	   if(!map.isEmpty())
 	   {
 			for(String key: map.keySet())
 			{
 					cbNames.addItem(key);	 
 			}
 	   }
 	   
 	     pay=user.getCredit();
 	     map=pay.getCardAccount();
 		
 	   if(!map.isEmpty())
 	   {
 			for(String key: map.keySet())
 			{
 				cbNames.addItem(key);
 			}
 	   }
    	
    }

    private void txtAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmountActionPerformed

    private void rbAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAutoActionPerformed
        if(rbAuto.isSelected()){
                rbAuto.setEnabled(true);
                rbManual.setEnabled(false);
                jLabel6.setEnabled(false);
                jLabel7.setEnabled(false);
                jLabel8.setEnabled(false);
                jLabel12.setEnabled(false);
                jLabel13.setEnabled(false);
                txtGrowthLitecoin.setEnabled(false);
                jLabel9.setEnabled(false);
                jLabel10.setEnabled(false);
                jLabel11.setEnabled(false);
                txtBitcoin.setEnabled(false);
                txtEthereum.setEnabled(false);
                txtLitecoin.setEnabled(false);
                txtGrowthBitcoin.setEnabled(false);
                txtGrowthEthereum.setEnabled(false);
                jTextField7.setEnabled(false);
                
                rbPercentage.setEnabled(false);
                rbGrowth.setEnabled(false);
                jLabel5.setEnabled(false);
                
                
                
    }
    else if(!rbAuto.isSelected()){
    	
                rbAuto.setEnabled(true);
                rbManual.setEnabled(true);
                jLabel6.setEnabled(true);
                jLabel7.setEnabled(true);
                jLabel8.setEnabled(true);
                jLabel12.setEnabled(true);
                jLabel13.setEnabled(true);
                txtGrowthLitecoin.setEnabled(true);
                jLabel9.setEnabled(true);
                jLabel10.setEnabled(true);
                jLabel11.setEnabled(true);
                txtBitcoin.setEnabled(true);
                txtEthereum.setEnabled(true);
                txtLitecoin.setEnabled(true);
                txtGrowthBitcoin.setEnabled(true);
                txtGrowthEthereum.setEnabled(true);
                jTextField7.setEnabled(true);
                
                rbPercentage.setEnabled(true);
                rbGrowth.setEnabled(true);
                jLabel5.setEnabled(true);
                
    }
    }//GEN-LAST:event_rbAutoActionPerformed

    private void rbManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbManualActionPerformed
          if(rbManual.isSelected()){
                rbAuto.setEnabled(false);
                rbManual.setEnabled(true);;
    }
    else if(!rbManual.isSelected()){
                rbAuto.setEnabled(true);
                rbManual.setEnabled(true);
    }
    }//GEN-LAST:event_rbManualActionPerformed

    private void rbPercentageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPercentageActionPerformed
        if(rbPercentage.isSelected()){
                rbPercentage.setEnabled(true);
                rbGrowth.setEnabled(false);
                txtGrowthBitcoin.setEnabled(false);
                txtGrowthEthereum.setEnabled(false);
                jTextField7.setEnabled(false);
                jLabel12.setEnabled(false);
                jLabel13.setEnabled(false);
                txtGrowthLitecoin.setEnabled(false);
    }
    else if(!rbPercentage.isSelected()){
                rbPercentage.setEnabled(true);
                rbGrowth.setEnabled(true);
                txtGrowthBitcoin.setEnabled(true);
                txtGrowthEthereum.setEnabled(true);
                jTextField7.setEnabled(true);
                jLabel12.setEnabled(true);
                jLabel13.setEnabled(true);
                txtGrowthLitecoin.setEnabled(true);
    }
    }//GEN-LAST:event_rbPercentageActionPerformed

    private void rbGrowthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbGrowthActionPerformed
        if(rbGrowth.isSelected()){
                rbPercentage.setEnabled(false);
                rbGrowth.setEnabled(true);
    }
    else if(!rbGrowth.isSelected()){
                rbPercentage.setEnabled(true);
                rbGrowth.setEnabled(true);
    }
    }//GEN-LAST:event_rbGrowthActionPerformed

    private void txtBitcoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBitcoinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBitcoinActionPerformed

    private void txtEthereumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEthereumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEthereumActionPerformed

    private void txtLitecoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLitecoinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLitecoinActionPerformed

    private void txtGrowthBitcoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGrowthBitcoinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGrowthBitcoinActionPerformed

    private void txtGrowthEthereumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGrowthEthereumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGrowthEthereumActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void lbl1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lbl1ActionPerformed
        
        if(lbl1.isSelected()){
           txtROI.setEnabled(true);
           txtIncreaseAmount.setEnabled(true);
           txtDays.setEnabled(true);
           rbDaily.setEnabled(true);
           rbWeekly.setEnabled(true);
           rbCustom.setEnabled(true);
           lbl1.setEnabled(true);
           lbl2.setEnabled(true);
           lbl3.setEnabled(true);
           jLabel17.setEnabled(true);
        }
        else if(!lbl1.isSelected()){
           txtROI.setEnabled(false);
           txtIncreaseAmount.setEnabled(false);
           txtDays.setEnabled(true);
           rbDaily.setEnabled(true);
           rbWeekly.setEnabled(true);
           rbCustom.setEnabled(true);
           lbl1.setEnabled(true);
           lbl2.setEnabled(false);
           lbl3.setEnabled(false);
           jLabel17.setEnabled(true);
        }
    }//GEN-LAST:event_lbl1ActionPerformed

    private void rbDailyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDailyActionPerformed
         if(rbDaily.isSelected()){
                        rbDaily.setEnabled(true);
                        rbWeekly.setEnabled(false);
                        rbCustom.setEnabled(false);
                         txtDays.setEnabled(false);
        }
        else if(!rbDaily.isSelected()){
                rbDaily.setEnabled(true);
                rbWeekly.setEnabled(true);
                rbCustom.setEnabled(true);
                 txtDays.setEnabled(true);
        }
    }//GEN-LAST:event_rbDailyActionPerformed

    private void txtDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDaysActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDaysActionPerformed

    private void btnScheduleActionPerformed(java.awt.event.ActionEvent evt) throws ClassNotFoundException, IOException {//GEN-FIRST:event_btnScheduleActionPerformed
        // TODO add your handling code here:
    	double amount = 0;
    	boolean investmentType = false;
    	boolean divideInvestment;
	double [] percentageDivision = {0,0,0};
    	double [] growthDivision = {0,0,0}; 
    	double increaseAmountPercentage = 0;
    	double percentROI = 0; 
    	int duration = 0; 
    	boolean roi = false;
    Date date = new Date();
    	
    	
    	if(!rbAccount.isSelected() && !rbCard.isSelected())
    	{
    		 JOptionPane.showMessageDialog(null, "Select payment method");
    	}
    	else if(bankName == null) {
      		 JOptionPane.showMessageDialog(null, "Select Payment Method");
      	}
    	else if(txtAmount.getText().trim().length() == 0 &&
        		txtAmount.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "Enter Amount!");        
        }
    	else if(!rbAuto.isSelected() && !rbManual.isSelected())
    	{
    		 JOptionPane.showMessageDialog(null, "Select Schedule type");
    	}
    	else if(rbDaily.isSelected()== false && rbWeekly.isSelected()== false && 
                rbCustom.isSelected()== false){
            JOptionPane.showMessageDialog(null, "Select a duration to repeat the tranaction!");
        }
    	else if(rbAuto.isSelected()) {
    		investmentType = true;
    		percentageDivision[0] = 0;
	    	percentageDivision[1] = 0;
	    	percentageDivision[2] = 0;
	    	growthDivision[0] = 0;
	    	growthDivision[1] = 0;
	    	growthDivision[2] = 0;
    	}
    	else if(rbManual.isSelected()){
    		investmentType = false;
    	}
    	
    	if(txtAmount.getText().trim().length() > 0){
    		for( int i =0; i < txtAmount.getText().length(); i++) {
    			if(!Character.isDigit(txtAmount.getText().charAt(i))) {
        			JOptionPane.showMessageDialog(null, "Amount is invalidr!");
        			break;
        		}
    		}	
    		amount = Double.parseDouble(txtAmount.getText());
    	}	
    	
    	if(!rbPercentage.isSelected()) {
    		divideInvestment = true;
    	}
    	else {
    		divideInvestment = false;
    	}
        
    	if(rbDaily.isSelected()){
        	duration = 2;
        }
        else if(rbWeekly.isSelected()){
        	duration = 7;
        }
        else if(rbCustom.isSelected()){
            if(txtDays.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter number of days to repeat the tranaction!");
            }
            else {
            	for( int i =0; i < txtDays.getText().length(); i++) {
            		if(!Character.isDigit(txtDays.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "Number of Days has to be an integer!");
            			break;
            		}
            	}
            	duration = Integer.parseInt(txtDays.getText());
            }
        }
    	
    	
    	
    	if(rbManual.isSelected() && !rbPercentage.isSelected() ) {
    		
    		if(txtBitcoin.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter percentage division  for bitcoin!");
            }
    		else if(txtEthereum.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter percentage division  for ethereum!");
            }
    		else if(txtLitecoin.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter percentage division  for litecoin!");
            }
    		else if(txtGrowthBitcoin.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter growth division  for bitcoin!");
            }
    		else if(txtGrowthEthereum.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter growth division  for ethereum!");
            }
    		else if(jTextField7.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter growth division  for litecoin!");
            }
    		else {
            	for( int i =0; i < txtBitcoin.getText().length(); i++) {
            		if(!Character.isDigit(txtBitcoin.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "percentage division  for bitcoin is invalid!");
            			break;
            		}
            	}
            	percentageDivision[0] = Double.parseDouble(txtBitcoin.getText());
            	
            	for( int i =0; i < txtEthereum.getText().length(); i++) {
            		if(!Character.isDigit(txtEthereum.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "percentage division  for ethereum is invalid!");
            			break;
            		}
            	}
            	percentageDivision[1] = Double.parseDouble(txtEthereum.getText());
            	
            	for( int i =0; i < txtLitecoin.getText().length(); i++) {
            		if(!Character.isDigit(txtLitecoin.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "percentage division  for litecoin is invalid!");
            			break;
            		}
            	}
            	percentageDivision[2] = Double.parseDouble(txtLitecoin.getText());
            	
            	for( int i =0; i < txtGrowthBitcoin.getText().length(); i++) {
            		if(!Character.isDigit(txtGrowthBitcoin.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "percentage division  for bitcoin is invalid!");
            			break;
            		}
            	}
            	growthDivision[0] = Double.parseDouble(txtGrowthBitcoin.getText());
            	
            	for( int i =0; i < txtGrowthEthereum.getText().length(); i++) {
            		if(!Character.isDigit(txtGrowthEthereum.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "percentage division  for ethereum is invalid!");
            			break;
            		}
            	}
            	growthDivision[1] = Double.parseDouble(txtGrowthEthereum.getText());
            	
            	for( int i =0; i < jTextField7.getText().length(); i++) {
            		if(!Character.isDigit(jTextField7.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "percentage division  for litecoin is invalid!");
            			break;
            		}
            	}
            	growthDivision[2] = Double.parseDouble(jTextField7.getText());
            
            }
    	}
    	
    	else if(rbManual.isSelected() && rbPercentage.isSelected()) {
    		//System.out.println("here");
    		if(txtBitcoin.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter percentage division  for bitcoin!");
            }
    		else if(txtEthereum.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter percentage division  for ethereum!");
            }
    		if(txtLitecoin.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter percentage division  for litecoin!");
            }
    		else {
            	for( int i =0; i < txtBitcoin.getText().length(); i++) {
            		if(!Character.isDigit(txtBitcoin.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "percentage division  for bitcoin is invalid!");
            			break;
            		}
            	}
            	percentageDivision[0] = Double.parseDouble(txtBitcoin.getText());
            	
            	for( int i =0; i < txtEthereum.getText().length(); i++) {
            		if(!Character.isDigit(txtEthereum.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "percentage division  for ethereum is invalid!");
            			break;
            		}
            	}
            	percentageDivision[1] = Double.parseDouble(txtEthereum.getText());
            	
            	for( int i =0; i < txtLitecoin.getText().length(); i++) {
            		if(!Character.isDigit(txtLitecoin.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "percentage division  for litecoin is invalid!");
            			break;
            		}
            	}
            	percentageDivision[2] = Double.parseDouble(txtLitecoin.getText());
            
            }

    	    	growthDivision[0] = 0;
    	    	growthDivision[1] = 0;
    	    	growthDivision[2] = 0;
    	}
    	
    	if(lbl1.isSelected()){
    		roi = true;
    		if(txtIncreaseAmount.getText().trim().length() == 0 &&
        			txtIncreaseAmount.getText().trim().equals("")) {
    			JOptionPane.showMessageDialog(null, "Enter increase amount percentage!");
    		}
    		
    		else if(txtROI.getText().trim().length() == 0 &&
    	    			txtROI.getText().trim().equals(""))
    		{
    			JOptionPane.showMessageDialog(null, "Enter percentage increase in ROI!");
    		}
    		
    		else{
        		for( int i =0; i < txtIncreaseAmount.getText().length(); i++) {
            		if(!Character.isDigit(txtIncreaseAmount.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "Increase amount percentage is invalid!");
            			break;
            		}
            	}
        		increaseAmountPercentage = Double.parseDouble(txtIncreaseAmount.getText());
        		
        		for( int i =0; i < txtROI.getText().length(); i++) {
            		if(!Character.isDigit(txtROI.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "Increase amount percentage is invalid!");
            			break;
            		}
            	}
        		percentROI = Double.parseDouble(txtROI.getText());
        		
        	}
    	}
    	else {
    		roi = false;
    		increaseAmountPercentage = 0;
    		percentROI = 0;
    	}
    	
    	if(txtIncreaseAmount.getText().trim().length() == 0 &&
    			txtIncreaseAmount.getText().trim().equals("")) {
    		increaseAmountPercentage = 0;
    	}
    	
    	
    	if(txtROI.getText().trim().length() == 0 &&
    			txtROI.getText().trim().equals("")) {
    		percentROI = 0;
    	}

    	
  
   
    	user.setAutoSchedulerHistory(amount, investmentType, divideInvestment, percentageDivision, 
    	growthDivision, increaseAmountPercentage, percentROI, duration, user, roi, bankName, date, currencySystem,
    cryptoCurrencies);
    	//AutoScheduler as = new AutoScheduler(amount, investmentType, divideInvestment, percentageDivision, 
    	//growthDivision, increaseAmountPercentage, percentROI, duration, user, roi, bankName);
    
    	    DashboardGUI g = new DashboardGUI(user, currencySystem);
 		g.setVisible(true);
 		Thread dashboard = new Thread(g);
 		dashboard.start();
    	
    	
    }//GEN-LAST:event_btnScheduleActionPerformed

    private void txtIncreaseAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIncreaseAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIncreaseAmountActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSchedule;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbNames;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JCheckBox lbl1;
    private javax.swing.JLabel lbl2;
    private javax.swing.JLabel lbl3;
    private javax.swing.JRadioButton rbAccount;
    private javax.swing.JRadioButton rbAuto;
    private javax.swing.JRadioButton rbCard;
    private javax.swing.JRadioButton rbCustom;
    private javax.swing.JRadioButton rbDaily;
    private javax.swing.JRadioButton rbGrowth;
    private javax.swing.JRadioButton rbManual;
    private javax.swing.JRadioButton rbPercentage;
    private javax.swing.JRadioButton rbWeekly;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtBitcoin;
    private javax.swing.JTextField txtDays;
    private javax.swing.JTextField txtEthereum;
    private javax.swing.JTextField txtGrowthBitcoin;
    private javax.swing.JTextField txtGrowthEthereum;
    private javax.swing.JLabel txtGrowthLitecoin;
    private javax.swing.JTextField txtIncreaseAmount;
    private javax.swing.JTextField txtLitecoin;
    private javax.swing.JTextField txtROI;
    // End of variables declaration//GEN-END:variables
}
