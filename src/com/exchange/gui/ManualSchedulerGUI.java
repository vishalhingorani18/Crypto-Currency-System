/*
Æ’ * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.exchange.gui;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;

import javax.swing.JOptionPane;

import com.exchange.CryptoCurrency;
import com.exchange.CurrencySystem;
import com.exchange.ManualScheduler;
import com.exchange.Payment;
import com.exchange.User;

/**
 *
 * @author samsung
 */
public class ManualSchedulerGUI extends javax.swing.JFrame {

	CurrencySystem currencySystem;
	CryptoCurrency [] cryptoCurrencies;
	User user;
	String bankName;
  
    public ManualSchedulerGUI() {
        initComponents();
     
    }

    public ManualSchedulerGUI(User user, CurrencySystem currencySystem, CryptoCurrency [] cryptoCurrencies)
    {
    	
    	System.out.println("Inside");
    	this.user = user;
    	this.currencySystem = currencySystem;
    	this.cryptoCurrencies = cryptoCurrencies;
    	initComponents();
    	
    		txtAmount.setText("");
     	txtQuantity.setText("");
     	txtDays.setText("");
     	txtAmount.setColumns(10);
     	txtQuantity.setColumns(10);
     	txtDays.setColumns(10);
    	
    	
   
    	
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rbBitcoin = new javax.swing.JRadioButton();
        rbEthereum = new javax.swing.JRadioButton();
        rbLitecoin = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        rbDaily = new javax.swing.JRadioButton();
        rbWeekly = new javax.swing.JRadioButton();
        rbCustom = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        txtDays = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        rbAmount = new javax.swing.JRadioButton();
        rbQuantity = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        btnSchedule = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        rbAccount = new javax.swing.JRadioButton();
        rbCreditCard = new javax.swing.JRadioButton();
        cbNames = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Basic Scheduler");

        jLabel2.setText("Currency");

        rbBitcoin.setText("Bitcoin");
        rbBitcoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBitcoinActionPerformed(evt);
            }
        });

        rbEthereum.setText("Ethereum");
        rbEthereum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEthereumActionPerformed(evt);
            }
        });

        rbLitecoin.setLabel("Litecoin");
        rbLitecoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLitecoinActionPerformed(evt);
            }
        });

        jLabel4.setText("Repeat Transaction");

        rbDaily.setLabel("Daily (2 secs)");
        rbDaily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDailyActionPerformed(evt);
            }
        });

        rbWeekly.setLabel("Weekly (7 secs)");
        rbWeekly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbWeeklyActionPerformed(evt);
            }
        });

        rbCustom.setLabel("Custom");
        rbCustom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rbCustomStateChanged(evt);
            }
        });
        rbCustom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCustomActionPerformed(evt);
            }
        });

        jLabel5.setText("Enter Days");

        txtDays.setText("jTextField2");
        txtDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDaysActionPerformed(evt);
            }
        });

        jLabel6.setText("Schedule Type");

        rbAmount.setLabel("By Amount");
        rbAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAmountActionPerformed(evt);
            }
        });

        rbQuantity.setLabel("By Quantity");
        rbQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	rbQuantityActionPerformed(evt);
            }
        });

        jLabel7.setText("Amount");

        jLabel8.setText("Quantity");

        txtAmount.setText("jTextField3");
        txtAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAmountActionPerformed(evt);
            }
        });

        txtQuantity.setText("jTextField4");
        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        btnSchedule.setLabel("Schedule");
        btnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnScheduleActionPerformed(evt);
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        jLabel3.setText("Payment Type");

        rbAccount.setText("Bank Account");
        rbAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					rbAccountActionPerformed(evt);
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        rbCreditCard.setText("Credit Card");
        rbCreditCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					rbCreditCardActionPerformed(evt);
				} catch (ClassNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        cbNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Bank" }));
        cbNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNamesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel6)
                                .addGap(42, 42, 42))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbDaily)
                                .addGap(26, 26, 26)
                                .addComponent(rbWeekly)
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbCustom)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7)
                                    .addComponent(rbAmount))
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rbQuantity)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbBitcoin)
                                .addGap(18, 18, 18)
                                .addComponent(rbEthereum)
                                .addGap(18, 18, 18)
                                .addComponent(rbLitecoin))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbAccount)
                                .addGap(18, 18, 18)
                                .addComponent(rbCreditCard)
                                .addGap(18, 18, 18)
                                .addComponent(cbNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(btnSchedule)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(rbAccount)
                    .addComponent(rbCreditCard)
                    .addComponent(cbNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(rbBitcoin)
                    .addComponent(rbEthereum)
                    .addComponent(rbLitecoin))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCustom)
                    .addComponent(rbWeekly)
                    .addComponent(rbDaily)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbQuantity)
                    .addComponent(rbAmount)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(btnSchedule)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbEthereumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEthereumActionPerformed
        // TODO add your handling code here:    	
    	
    	 if(rbEthereum.isSelected())
			{
		    rbBitcoin.setEnabled(false);
		    rbEthereum.setEnabled(true);
			rbLitecoin.setEnabled(false);
			}else if(!rbEthereum.isSelected())
			{
			rbBitcoin.setEnabled(true);
			rbEthereum.setEnabled(true);
			rbLitecoin.setEnabled(true);
			}
    	
    	
    	
    }//GEN-LAST:event_rbEthereumActionPerformed

    private void rbLitecoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLitecoinActionPerformed
        // TODO add your handling code here:
    	
   	 if(rbLitecoin.isSelected())
			{
		    rbBitcoin.setEnabled(false);
		    rbEthereum.setEnabled(false);
			rbLitecoin.setEnabled(true);
			}else if(!rbLitecoin.isSelected())
			{
			rbBitcoin.setEnabled(true);
			rbEthereum.setEnabled(true);
			rbLitecoin.setEnabled(true);
			}
   	
    	
    	
    }//GEN-LAST:event_rbLitecoinActionPerformed

    private void rbBitcoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBitcoinActionPerformed
        // TODO add your handling code here:

    	
	       if(rbBitcoin.isSelected())
			{
		    rbBitcoin.setEnabled(true);
		    rbEthereum.setEnabled(false);
			rbLitecoin.setEnabled(false);
			}else if(!rbBitcoin.isSelected())
			{
			rbBitcoin.setEnabled(true);
			rbEthereum.setEnabled(true);
			rbLitecoin.setEnabled(true);
			}


    	
    }//GEN-LAST:event_rbBitcoinActionPerformed

    private void rbDailyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDailyActionPerformed
        if(rbDaily.isSelected()){
        		rbDaily.setEnabled(true);
        		rbWeekly.setEnabled(false);
        		rbCustom.setEnabled(false);
        		 txtDays.setEnabled(false);
        		 
        		 jLabel5.setEnabled(false);
        }
        else if(!rbDaily.isSelected()){ 
        	rbDaily.setEnabled(true);
    		rbWeekly.setEnabled(true);
    		rbCustom.setEnabled(true);
    		 txtDays.setEnabled(true);
    		 jLabel5.setEnabled(true);
    		 
        }
    }//GEN-LAST:event_rbDailyActionPerformed

    private void rbWeeklyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbWeeklyActionPerformed
        if(rbWeekly.isSelected()){
    		rbDaily.setEnabled(false);
    		rbWeekly.setEnabled(true);
    		rbCustom.setEnabled(false);
    		 txtDays.setEnabled(false);
    		 jLabel5.setEnabled(false);
    }
    else if(!rbWeekly.isSelected()){ 
    	rbDaily.setEnabled(true);
		rbWeekly.setEnabled(true);
		rbCustom.setEnabled(true);
		 txtDays.setEnabled(true);
		 jLabel5.setEnabled(true);
    }
    }//GEN-LAST:event_rbWeeklyActionPerformed

    private void txtDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDaysActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDaysActionPerformed

    private void txtAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAmountActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void btnScheduleActionPerformed(java.awt.event.ActionEvent evt) throws ClassNotFoundException, IOException {//GEN-FIRST:event_btnScheduleActionPerformed
    
    	int duration= 0;
    	boolean type = false;
    	String name = "";
    	Date date = new Date();
    	
    	if(!rbAccount.isSelected() && !rbCreditCard.isSelected())
    	{
    		 JOptionPane.showMessageDialog(null, "Select payment method");
    	}
    	
    	
    	else if(rbBitcoin.isSelected()== false && rbEthereum.isSelected()== false && 
                rbLitecoin.isSelected()== false){
            JOptionPane.showMessageDialog(null, "Select a currency!");
        }
    
    		
     	else if(rbDaily.isSelected()== false && rbWeekly.isSelected()== false && 
                rbCustom.isSelected()== false){
            JOptionPane.showMessageDialog(null, "Select a duration to repeat the tranaction!");
        }
    	
        
        else if(rbAmount.isSelected()== false && rbQuantity.isSelected()== false){
            JOptionPane.showMessageDialog(null, "Select tranaction type!");
        }
        
         if(rbAmount.isSelected()){
        	txtQuantity.setText("0");
           
            type = true;
            System.out.println("yes");
            System.out.println(txtAmount.getText());
            if(txtAmount.getText().trim().length() == 0 &&
            		txtAmount.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null, "Enter Amount!");
            }
            else 
            {
            	for( int i =0; i < txtAmount.getText().length(); i++)
            	{
            		if(!Character.isDigit(txtAmount.getText().charAt(i)) && txtAmount.getText().charAt(i) != '.') {
            			JOptionPane.showMessageDialog(null, "Amount not valid!");
            			break;
            		}
            	}
            }
        }
        else if(rbQuantity.isSelected()) {
        	txtAmount.setText("0");
            type = false;
            System.out.println("yes yes");
            System.out.println(txtQuantity.getText());
            if(txtQuantity.getText().trim().length() == 0 &&
            		txtQuantity.getText().trim().equals("")){
                JOptionPane.showMessageDialog(null, "Enter Quantity!");
            }
            else {
            	for( int i =0; i < txtQuantity.getText().length(); i++) {
            		if(!Character.isDigit(txtQuantity.getText().charAt(i)) && txtQuantity.getText().charAt(i) != '.') {
            			JOptionPane.showMessageDialog(null, "Quantity not valid!");
            			break;
            		}
            	}
            }
        }
        
    	 if(rbBitcoin.isSelected())
    	{
    		name = "bitcoin";
    	}
     	else if(rbEthereum.isSelected())
    	{
    		name = "ethereum";
    	}
     	else if(rbLitecoin.isSelected())
    	{
    		name = "litecoin";
    	} 
       
     	 if(rbDaily.isSelected()){
        	duration = 2;
        }
        else if(rbWeekly.isSelected()){
        	duration = 7;
        }
        else if(rbCustom.isSelected()){
            if(txtDays.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Enter number of days to repeat the tranaction!");
            }
            else {
            	for( int i =0; i < txtDays.getText().length(); i++) {
            		if(!Character.isDigit(txtDays.getText().charAt(i))) {
            			JOptionPane.showMessageDialog(null, "Number of Days has to be an integer!");
            			break;
            		}
            	}
            	duration = Integer.parseInt(txtDays.getText());
            }
        }
     	
        user.setSchedulerHistory(user,Double.parseDouble(txtAmount.getText()),Double.parseDouble(txtQuantity.getText()),
        		duration,type,name, currencySystem, cryptoCurrencies, bankName, date);
        //ManualScheduler ms = new ManualScheduler(user,Double.parseDouble(txtAmount.getText()),Double.parseDouble(txtQuantity.getText()),
        	//	duration,type,name, currencySystem, cryptoCurrencies, bankName);
        
        DashboardGUI g = new DashboardGUI(user, currencySystem);
		g.setVisible(true);
		Thread dashboard = new Thread(g);
		dashboard.start();

        
        
    }//GEN-LAST:event_btnScheduleActionPerformed

    private void rbCustomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCustomActionPerformed
        // TODO add your handling code here:
    	
        if(rbCustom.isSelected()){
      		rbDaily.setEnabled(false);
      		rbWeekly.setEnabled(false);
      		rbCustom.setEnabled(true);
          txtDays.setEnabled(true);
          jLabel5.setEnabled(true);
      }
      else if(!rbCustom.isSelected()){ 
      	rbDaily.setEnabled(true);
  		rbWeekly.setEnabled(true);
  		rbCustom.setEnabled(true);
  		 txtDays.setEnabled(true);
  		jLabel5.setEnabled(true);
      }
    	
    	
    }//GEN-LAST:event_rbCustomActionPerformed

    private void rbCustomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rbCustomStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_rbCustomStateChanged

    private void rbAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAmountActionPerformed
        // TODO add your handling code here:
    	
    	if(rbAmount.isSelected()){
      		rbAmount.setEnabled(true);
      		rbQuantity.setEnabled(false);
      		txtAmount.setEnabled(true);
      		txtQuantity.setEnabled(false);
      		jLabel7.setEnabled(true);
      		jLabel8.setEnabled(false);
      
      }
      else if(!rbAmount.isSelected()){ 
    		rbAmount.setEnabled(true);
      		rbQuantity.setEnabled(true);
      		txtAmount.setEnabled(true);
      		txtQuantity.setEnabled(true);
      		jLabel7.setEnabled(true);
      		jLabel8.setEnabled(true);
      }
    	
    	
    	
    }//GEN-LAST:event_rbAmountActionPerformed
    
    private void rbQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAmountActionPerformed
        // TODO add your handling code here:
    	
    	if(rbQuantity.isSelected()){
      		rbAmount.setEnabled(false);
      		rbQuantity.setEnabled(true);
      		txtAmount.setEnabled(false);
      		txtQuantity.setEnabled(true);
      		jLabel7.setEnabled(false);
      		jLabel8.setEnabled(true);
      
      }
      else if(!rbQuantity.isSelected()){ 
    			rbAmount.setEnabled(true);
      		rbQuantity.setEnabled(true);
      		txtAmount.setEnabled(true);
      		txtQuantity.setEnabled(true);
      		jLabel7.setEnabled(true);
      		jLabel8.setEnabled(true);
      }
    	
    	
    	
    }
    
    

    private void rbAccountActionPerformed(java.awt.event.ActionEvent evt) throws ClassNotFoundException, IOException {//GEN-FIRST:event_rbAccountActionPerformed
        // TODO add your handling code here:
        if(rbAccount.isSelected()){
        		cbNames.removeAllItems();
        		addCombo();
            rbAccount.setEnabled(true);
            rbCreditCard.setEnabled(false);;
}
else if(!rbAccount.isSelected()){
	cbNames.removeAllItems();
	cbNames.addItem("Select Bank");
	rbAccount.setEnabled(true);
            rbCreditCard.setEnabled(true);
}
    }//GEN-LAST:event_rbAccountActionPerformed

    private void rbCreditCardActionPerformed(java.awt.event.ActionEvent evt) throws ClassNotFoundException, IOException {//GEN-FIRST:event_rbCreditCardActionPerformed
        // TODO add your handling code here:
    
        if(rbCreditCard.isSelected()){
        	cbNames.removeAllItems();
        		addCombo();
            rbAccount.setEnabled(false);
            rbCreditCard.setEnabled(true);;
}
else if(!rbCreditCard.isSelected()){
	cbNames.removeAllItems();
	cbNames.addItem("Select Bank");
            rbAccount.setEnabled(true);
            rbCreditCard.setEnabled(true);
}
        
    }//GEN-LAST:event_rbCreditCardActionPerformed
    

    public void addCombo() throws ClassNotFoundException, IOException
    {
    	    Payment pay=user.getBank();
 		HashMap<String, Double> map=pay.getBankAccount();
 		
 		
 		
 	   if(!map.isEmpty())
 	   {
 			for(String key: map.keySet())
 			{
 					cbNames.addItem(key);	 
 			}
 	   }
 	   
 	     pay=user.getCredit();
 	     map=pay.getCardAccount();
 		
 	   if(!map.isEmpty())
 	   {
 			for(String key: map.keySet())
 			{
 				cbNames.addItem(key);
 			}
 	   }
    	
    }
    
    
    
    
    private void cbNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNamesActionPerformed
        // TODO add your handling code here:
    	if(cbNames.getSelectedItem()!=null)
    	     bankName=cbNames.getSelectedItem().toString();
    	
    }//GEN-LAST:event_cbNamesActionPerformed

  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSchedule;
    private javax.swing.JComboBox<String> cbNames;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton rbAccount;
    private javax.swing.JRadioButton rbAmount;
    private javax.swing.JRadioButton rbBitcoin;
    private javax.swing.JRadioButton rbCreditCard;
    private javax.swing.JRadioButton rbCustom;
    private javax.swing.JRadioButton rbDaily;
    private javax.swing.JRadioButton rbEthereum;
    private javax.swing.JRadioButton rbLitecoin;
    private javax.swing.JRadioButton rbQuantity;
    private javax.swing.JRadioButton rbWeekly;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtDays;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}




